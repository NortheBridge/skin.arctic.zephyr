<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
	<include name="View_55_Wall_Poster">
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(55)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<control type="panel" id="55">
				<visible>Container.Content(musicvideos) | Container.Content(movies) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(sets)</visible>
				<top>206</top>
				<right>70</right>
				<width>1332</width>
				<height>670</height>
				<onleft condition="!Skin.HasSetting(global.kioskmode)">9000</onleft>
				<onright>60</onright>
				<onup>55</onup>
				<ondown>55</ondown>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<viewtype label="536">list</viewtype>
				<scrolltime tween="quadratic">400</scrolltime>
				<itemlayout height="335" width="222">
					<control type="image">
						<left>2</left>
						<top>0</top>
						<right>0</right>
						<bottom>10</bottom>
						<texture border="10">common/nofocus-shadow10.png</texture>
					</control>
					<control type="image">
						<left>12</left>
						<top>10</top>
						<right>10</right>
						<bottom>20</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
				</itemlayout>
				<focusedlayout height="335" width="222">
					<control type="button">
						<texturefocus>-</texturefocus>
						<texturenofocus>-</texturenofocus>
						<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
						<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
					</control>
					<control type="image">
						<left>2</left>
						<top>0</top>
						<right>0</right>
						<bottom>10</bottom>
						<texture border="10">common/nofocus-shadow10.png</texture>
					</control>
					<control type="image">
						<left>12</left>
						<top>10</top>
						<right>10</right>
						<bottom>20</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
					<control type="image">
						<left>5</left>
						<top>3</top>
						<right>3</right>
						<bottom>13</bottom>
						<texture colordiffuse="$VAR[ColourHighlight]" border="20">common/selectbox.png</texture>
						<animation type="Focus">
							<effect type="zoom" start="90" end="100" time="150" tween="sine" easing="inout" center="auto" />
							<effect type="fade" start="0" end="100" time="150" tween="sine" easing="in" />
						</animation>
						<animation type="Unfocus">
							<effect type="zoom" start="100" end="90" time="150" tween="sine" easing="inout" center="auto" />
							<effect type="fade" start="100" end="0" time="150" tween="sine" easing="out" />
						</animation>
					</control>
				</focusedlayout>
			</control>
			<include>Furniture_Scrollbar</include>
			<include>View_50_SidePoster</include>
		</control>
	</include>
	<include name="View_55_Wall_Info">
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(55)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<control type="panel" id="55">
				<visible>Container.Content(musicvideos) | Container.Content(movies) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(sets)</visible>
				<top>206</top>
				<right>70</right>
				<width>1135</width>
				<height>660</height>
				<onleft condition="!Skin.HasSetting(global.kioskmode)">9000</onleft>
				<onright>60</onright>
				<onup>55</onup>
				<ondown>55</ondown>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<viewtype label="536">list</viewtype>
				<scrolltime tween="quadratic">400</scrolltime>
				<itemlayout height="330" width="227">
					<control type="image">
						<width>100%</width>
						<height>100%</height>
						<texture border="10">common/nofocus-shadow10.png</texture>
					</control>
					<control type="image">
						<left>10</left>
						<top>10</top>
						<right>10</right>
						<bottom>10</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
						<animation effect="fade" start="90" end="90" time="00" reversible="false" condition="true">conditional</animation>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
				</itemlayout>
				<focusedlayout height="330" width="227">
					<control type="group">
						<animation effect="zoom" start="100" end="105" time="10" reversible="false" center="auto">Focus</animation>
						<animation effect="zoom" start="105" end="100" time="10" reversible="false" center="auto">UnFocus</animation>
						<control type="button">
							<texturefocus>-</texturefocus>
							<texturenofocus>-</texturenofocus>
							<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
							<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						</control>
						<control type="image">
							<width>100%</width>
							<height>100%</height>
							<texture border="10">common/nofocus-shadow10.png</texture>
						</control>
						<control type="image">
							<left>10</left>
							<top>10</top>
							<right>10</right>
							<bottom>10</bottom>
							<aspectratio scalediffuse="false">stretch</aspectratio>
							<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
							<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture>$VAR[PosterPercentWatched]</texture>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[PlayingColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[WatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[ResumeColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[NewColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
						</control>
						<control type="image">
							<left>3</left>
							<top>3</top>
							<right>3</right>
							<bottom>3</bottom>
							<texture colordiffuse="$VAR[ColourHighlight]" border="20">common/selectbox.png</texture>
							<!--<animation type="Focus">
								<effect type="zoom" start="90" end="100" time="50" tween="sine" easing="inout" center="auto" />
								<effect type="fade" start="0" end="100" time="50" tween="sine" easing="in" />
							</animation>
							<animation type="Unfocus">
								<effect type="zoom" start="100" end="90" time="50" tween="sine" easing="inout" center="auto" />
								<effect type="fade" start="100" end="0" time="50" tween="sine" easing="out" />
							</animation>-->
						</control>
					</control>
				</focusedlayout>
			</control>
			<include>Furniture_Scrollbar</include>
			<include name="Fanart_Info">
				<param name="posx" value="70" />
			</include>
		</control>
	</include>
	<include name="View_55_Wall">
		<control type="group">
			<include>Animation.Common</include>
			<visible>Control.IsVisible(55)</visible>
			<visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogAlbumInfo.xml)</visible>
			<control type="panel" id="55">
				<visible>Container.Content(musicvideos) | Container.Content(movies) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(sets)</visible>
				<top>206</top>
				<right>70</right>
				<left>70</left>
				<height>674</height>
				<onleft condition="!Skin.HasSetting(global.kioskmode)">9000</onleft>
				<onright>60</onright>
				<onup>55</onup>
				<ondown>55</ondown>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<viewtype label="536">list</viewtype>
				<scrolltime tween="quadratic">400</scrolltime>
				<itemlayout height="337" width="222">
					<control type="image">
						<left>0</left>
						<top>0</top>
						<right>0</right>
						<bottom>12</bottom>
						<texture border="10">common/nofocus-shadow10.png</texture>
					</control>
					<control type="image">
						<left>10</left>
						<top>10</top>
						<right>10</right>
						<bottom>22</bottom>
						<aspectratio scalediffuse="false">stretch</aspectratio>
						<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
						<animation effect="fade" start="90" end="90" time="00" reversible="false" condition="true">conditional</animation>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
						<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
					</control>
					<control type="image">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<aspectratio aligny="top">keep</aspectratio>
						<texture>$VAR[PosterPercentWatched]</texture>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[PlayingColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[WatchedColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[ResumeColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
					</control>
					<control type="label">
						<centerright>32</centerright>
						<centertop>32</centertop>
						<width>32</width>
						<height>32</height>
						<font>symbolview</font>
						<label>$VAR[PercentWatchedLabel]</label>
						<textcolor>$VAR[NewColourHighlight]</textcolor>
						<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
					</control>
				</itemlayout>
				<focusedlayout height="337" width="222">
					<control type="group">
						<animation effect="zoom" start="100" end="105" time="10" reversible="false" center="auto">Focus</animation>
						<animation effect="zoom" start="105" end="100" time="10" reversible="false" center="auto">UnFocus</animation>
						<control type="button">
							<texturefocus>-</texturefocus>
							<texturenofocus>-</texturenofocus>
							<onfocus condition="Container.Content(movies)">ClearProperty(TVShowID,home)</onfocus>
							<onfocus condition="Container.Content(tvshows)">SetProperty(TVShowID,$INFO[ListItem.DBID],home)</onfocus>
						</control>
						<control type="image">
							<left>0</left>
							<top>0</top>
							<right>0</right>
							<bottom>12</bottom>
							<texture border="10">common/nofocus-shadow10.png</texture>
						</control>
						<control type="image">
							<left>10</left>
							<top>10</top>
							<right>10</right>
							<bottom>22</bottom>
							<aspectratio scalediffuse="false">stretch</aspectratio>
							<texture diffuse="diffuse/wall.png" background="true">$VAR[PosterImage]</texture>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture colordiffuse="$VAR[PercentColourHighlight]">$VAR[PosterPercentWatchedBacking]</texture>
							<visible>!Skin.HasSetting(furniture.alternateindicators)</visible>
						</control>
						<control type="image">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<aspectratio aligny="top">keep</aspectratio>
							<texture>$VAR[PosterPercentWatched]</texture>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[UnwatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayUnwatched.png) + Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[PlayingColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsPlaying</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[WatchedColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + stringcompare(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(furniture.unwatched)</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[ResumeColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + ListItem.IsResumable</visible>
						</control>
						<control type="label">
							<centerright>32</centerright>
							<centertop>32</centertop>
							<width>32</width>
							<height>32</height>
							<font>symbolview</font>
							<label>$VAR[PercentWatchedLabel]</label>
							<textcolor>$VAR[NewColourHighlight]</textcolor>
							<visible>!stringcompare(ListItem.Label,..) + [SubString(ListItem.Overlay,OverlayUnwatched.png) + [[Container.Content(movies) + [StringCompare(Window(Home).Property(LatestMovie.1.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.2.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.3.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.4.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.5.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.6.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.7.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.8.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.9.Title),ListItem.Label) | StringCompare(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)]] | [[Container.Content(tvshows)] + [StringCompare(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) | StringCompare(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)]] | [Container.Content(episodes) + [StringCompare(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) | StringCompare(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)]]]]</visible>
						</control>
						<control type="image">
							<left>3</left>
							<top>3</top>
							<right>3</right>
							<bottom>15</bottom>
							<texture colordiffuse="$VAR[ColourHighlight]" border="20">common/selectbox.png</texture>
						</control>
					</control>
				</focusedlayout>
			</control>
			<include>Furniture_Scrollbar</include>
		</control>
	</include>
</includes>